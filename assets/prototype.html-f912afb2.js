import{_ as n,o as s,c as a,b as o}from"./app-de7a4551.js";const e={},t=o(`<h1 id="prototype-原型" tabindex="-1"><a class="header-anchor" href="#prototype-原型" aria-hidden="true">#</a> prototype | 原型</h1><h2 id="example-function" tabindex="-1"><a class="header-anchor" href="#example-function" aria-hidden="true">#</a> example function</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 第一步 创建构造函数</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 第二步 创建实例</span>
<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;person&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>下面（<code>prototype</code>、<code>__proto__</code>、<code>constructor</code>）以此例子进行解释</strong></p></blockquote><h2 id="prototype" tabindex="-1"><a class="header-anchor" href="#prototype" aria-hidden="true">#</a> <code>prototype</code></h2><ol><li><p>它是<strong>函数所独有</strong>， 从一个函数(<code>Person</code>)指向一个对象(<code>prototype</code>)，它的含义是<strong>函数的原型对象</strong></p></li><li><p>任何函数在创建的时候，其实会默认同时创建该函数的 <code>prototype</code> 对象。</p></li><li><p><code>prototype</code>会自动获得 <code>constructor</code> 和 <code>__proto__</code>，这两个属性都是用来<strong>储存指针</strong>。</p><ul><li><p><code>constructor</code> 指向函数本身</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>__proto__</code> 指向内置对象（<strong>个人感觉非常重要的一点</strong>，下面详细解释）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="person-prototype-结构" tabindex="-1"><a class="header-anchor" href="#person-prototype-结构" aria-hidden="true">#</a> Person.prototype 结构</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出</span>
<span class="token punctuation">{</span> <span class="token comment">/*Person.prototype*/</span>
    <span class="token comment">// 指向函数本身</span>
    <span class="token literal-property property">constructor</span><span class="token operator">:</span> ƒ <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">__proto__</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/*Object.prototype*/</span>
        <span class="token literal-property property">constructor</span><span class="token operator">:</span> ƒ <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">hasOwnProperty</span><span class="token operator">:</span> ƒ <span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">isPrototypeOf</span><span class="token operator">:</span> ƒ <span class="token function">isPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">propertyIsEnumerable</span><span class="token operator">:</span> ƒ <span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">toLocaleString</span><span class="token operator">:</span> ƒ <span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">toString</span><span class="token operator">:</span> ƒ <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">valueOf</span><span class="token operator">:</span> ƒ <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="proto" tabindex="-1"><a class="header-anchor" href="#proto" aria-hidden="true">#</a> <code>__proto__</code></h2><ol><li><p>ES标准定义中的名字是 <code>[[Prototype]]</code>， 谷歌浏览器的实现就是将其命名为 <code>__proto__</code> （名字有所差异，功能是一样）。</p></li><li><p>它是<strong>对象所独有</strong>，指向该对象(<code>p1</code>)的构造函数的原型对象(<code>Person.prototype</code>)。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    p1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>原型对象本身是一个普通对象，而普通对象的构造函数都是 <code>Object</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>函数也是一种特殊对象，所以函数也拥有 <code>__proto__</code> ，而且都统一指向 <code>Function.prototype</code>，<strong>包括 <code>Function</code> 本身</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    Person<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
    Object<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**Function 比较特殊，__proto__ 向上访问时可以回到本身*/</span>
    Function<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>Object</code> 的原型对象也有 <code>__proto__</code> 属性，比较特殊，指向 <code>null</code>，所以 <code>null</code> 是原型链的顶端</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>它的作用就是当访问一个对象（<code>p</code>）的属性时，如果该对象内部不存在这个属性，那么就会去 <code>p1.__proto__</code> 所指向的那个对象（可以理解为父对象<code>Person.prototype</code>）里找，如果父对象也不存在这个属性，则继续往父对象（<code>Person.prototype.__proto__</code>）...如果还没找到，则继续往上找…直到原型链顶端 <code>null</code> 到此结束。</strong></p><ul><li><p>通过 <code>__proto__</code> 属性来连接对象直到 <code>null</code> 的一条链即为我们所谓的<strong>原型链</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    p1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
    <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
    <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> <code>constructor</code></h2><ol><li><p>单从 <code>constructor</code> 这个属性来讲，只有 <code>prototype</code> 对象才有。每个<strong>函数</strong>在创建的时候，JS会同时创建一个该函数对应的 <code>prototype</code> 对象</p></li><li><p>它是<strong>对象所独有</strong>，从<strong>一个对象指向一个函数</strong>, 含义就是指向<strong>该对象(<code>p1</code>)</strong> 的<strong>构造函数(<code>Person</code>)</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    p1<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**访问流程*/</span>
    <span class="token doc-comment comment">/**先通过 __proto__ 找到对应 prototype */</span>
    p1<span class="token punctuation">.</span>__proto__ <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> 
    <span class="token doc-comment comment">/**再从 prototype 里找 constructor ，要是没用会继续通过 __proto__ 向上查询*/</span>
    <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">;</span> <span class="token doc-comment comment">/**与上面 p1.constructor === Person 等价*/</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>所有函数和对象最终都是由 <code>Function</code> 构造函数得来，所以 <code>constructor</code> 属性的终点就是 <code>Function</code> 这个函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token class-name">Person</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function<span class="token punctuation">;</span>
    <span class="token class-name">Object</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**因为上面 __proto__ 第四点提到 Function 的特殊性，所以出现下面例子*/</span>
    <span class="token class-name">Function</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,12),p=[t];function c(l,r){return s(),a("div",null,p)}const u=n(e,[["render",c],["__file","prototype.html.vue"]]);export{u as default};
