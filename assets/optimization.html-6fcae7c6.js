import{_ as a,o as s,c as n,b as e}from"./app-de7a4551.js";const t={},o=e(`<h1 id="css-性能优化" tabindex="-1"><a class="header-anchor" href="#css-性能优化" aria-hidden="true">#</a> CSS 性能优化</h1><ul><li>内联首屏关键 CSS</li><li>避免使用 @import</li><li>异步加载 CSS</li><li>压缩 CSS</li><li>合理使用 CSS 选择器</li><li>减少使用昂贵的属性</li></ul><h2 id="内联首屏关键-css" tabindex="-1"><a class="header-anchor" href="#内联首屏关键-css" aria-hidden="true">#</a> 内联首屏关键 CSS</h2><p>在打开一个页面，页面首要内容出现在屏幕的时间影响着用户的体验，而通过内联<code>css</code>关键代码能够使浏览器在下载完<code>html</code>后就能立刻渲染</p><p>而如果外部引用css代码，在解析<code>html</code>结构过程中遇到外部<code>css</code>文件，才会开始下载<code>css</code>代码，再渲染</p><p>所以，<code>CSS</code>内联使用使渲染时间提前</p><blockquote><p>注意：但是较大的<code>css</code>代码并不合适内联（初始拥塞窗口、没有缓存），而其余代码则采取外部引用方式</p></blockquote><h2 id="避免使用-import" tabindex="-1"><a class="header-anchor" href="#避免使用-import" aria-hidden="true">#</a> 避免使用 @import</h2><ul><li>css样式文件有两种引入方式，一种是link元素，另一种是<code>@import</code>。</li><li><code>@import</code>会影响浏览器的并行下载，使得页面在加载时增加额外的延迟，增添了额外的往返耗时, 而且多个<code>@import</code>可能会导致下载顺序紊乱。</li><li>比如一个css文件<code>index.css</code>包含了以下内容：<code>@import url(&quot;reset.css&quot;)</code>，那么浏览器就必须先把<code>index.css</code>下载、解析和执行后，才下载、解析和执行第二个文件reset.css。</li></ul><h2 id="异步加载-css" tabindex="-1"><a class="header-anchor" href="#异步加载-css" aria-hidden="true">#</a> 异步加载 CSS</h2><p>在CSS文件请求、下载、解析完成之前，CSS会阻塞渲染，浏览器将不会渲染任何已处理的内容<br> 前面加载内联代码后，后面的外部引用css则没必要阻塞浏览器渲染。这时候就可以采取异步加载的方案，主要有如下：</p><ol><li><p>使用javascript将link标签插到head标签最后，这样就可以使页面先渲染出来，然后再加载css文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token comment">// 创建link标签</span>
    <span class="token keyword">const</span> myCSS <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span> <span class="token string">&quot;link&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    myCSS<span class="token punctuation">.</span>rel <span class="token operator">=</span> <span class="token string">&quot;stylesheet&quot;</span><span class="token punctuation">;</span>
    myCSS<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;mystyles.css&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 插入到header的最后位置</span>
    document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span> myCSS<span class="token punctuation">,</span> document<span class="token punctuation">.</span>head<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span> document<span class="token punctuation">.</span>head<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>nextSibling <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>设置<code>link</code>标签<code>media</code>属性为<code>noexis</code>，浏览器会认为当前样式表不适用当前类型，会在不阻塞页面渲染的情况下再进行下载。加载完成后，将<code>media</code>的值设为<code>screen</code>或<code>all</code>，从而让浏览器开始解析CSS</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mystyles.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>noexist<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>media<span class="token operator">=</span><span class="token string">&#39;all&#39;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>通过<code>rel</code>属性将<code>link</code>元素标记为<code>alternate</code>可选样式表，也能实现浏览器异步加载。同样别忘了加载完成之后，将<code>rel</code>设回<code>stylesheet</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>alternate stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mystyles.css<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>rel<span class="token operator">=</span><span class="token string">&#39;stylesheet&#39;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="压缩-css" tabindex="-1"><a class="header-anchor" href="#压缩-css" aria-hidden="true">#</a> 压缩 CSS</h2><p>利用 <code>webpack</code>、<code>gulp</code>/<code>grunt</code>、<code>rollup</code>等模块化工具，将<code>css</code>代码进行压缩，使文件变小，大大降低了浏览器的加载时间</p><h2 id="合理使用-css-选择器" tabindex="-1"><a class="header-anchor" href="#合理使用-css-选择器" aria-hidden="true">#</a> 合理使用 CSS 选择器</h2><p><code>css</code>匹配的规则是从右往左开始匹配，例如<code>#markdown .content h3</code>匹配规则如下：</p><blockquote><p>从右往左匹配: 先匹配<code>h3</code>-&gt; 再匹配<code>.content</code>-&gt; 最后匹配<code>#markdown</code>；</p></blockquote><p>如果嵌套的层级更多，页面中的元素更多，那么匹配所要花费的时间代价自然更高，所以我们在编写选择器的时候，可以遵循以下规则：</p><ol><li>通配符和属性选择器效率最低，避免使用</li><li>使用id选择器就没必要再进行嵌套</li><li>不要嵌套使用过多复杂选择器，最好不要三层以上</li></ol><h2 id="减少使用昂贵的属性" tabindex="-1"><a class="header-anchor" href="#减少使用昂贵的属性" aria-hidden="true">#</a> 减少使用昂贵的属性</h2><blockquote><p>在页面发生重绘的时候，昂贵属性如<code>box-shadow</code>/<code>border-radius</code>/<code>filter</code>/<code>opacity</code>/<code>:nth-child</code>等，会降低浏览器的渲染性能</p></blockquote><h2 id="其它" tabindex="-1"><a class="header-anchor" href="#其它" aria-hidden="true">#</a> 其它</h2><ul><li>减少重排操作，以及减少不必要的重绘</li><li>了解哪些属性可以继承而来，避免对这些属性重复编写</li><li>把小的icon图片转成base64编码</li><li>CSS3动画或者过渡尽量使用transform和opacity来实现动画，不要使用left和top属性</li></ul>`,23),c=[o];function p(l,i){return s(),n("div",null,c)}const u=a(t,[["render",p],["__file","optimization.html.vue"]]);export{u as default};
