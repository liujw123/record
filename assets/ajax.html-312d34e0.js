import{_ as n,o as a,c as s,b as e}from"./app-de7a4551.js";const t={},c=e(`<h1 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax" aria-hidden="true">#</a> Ajax</h1><p>全称 - Asynchronous JavaScript and XML</p><h2 id="过程步骤" tabindex="-1"><a class="header-anchor" href="#过程步骤" aria-hidden="true">#</a> 过程步骤</h2><ol><li>创建 <code>Ajax</code> 的核心对象 <code>XMLHttpRequest</code> 对象</li><li>调用 <code>XMLHttpRequest</code> 对象的 <code>open</code> 方法与服务端建立连接</li><li>构建请求所需的数据内容，调用 <code>XMLHttpRequest</code> 对象的 <code>send</code> 方法发送请求给服务器端</li><li>通过 <code>XMLHttpRequest</code> 对象提供的 <code>onreadystatechange</code> 事件监听服务器端你的通信状态</li><li>接受并处理服务端向客户端响应的数据结果</li><li>将处理结果更新到 HTML 页面中</li></ol><h2 id="创建-xmlhttprequest-对象" tabindex="-1"><a class="header-anchor" href="#创建-xmlhttprequest-对象" aria-hidden="true">#</a> 创建 XMLHttpRequest 对象</h2><p>通过 <code>XMLHttpRequest()</code> 构造函数用于初始化一个 <code>XMLHttpRequest</code> 实例对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="与服务端建立连接-open" tabindex="-1"><a class="header-anchor" href="#与服务端建立连接-open" aria-hidden="true">#</a> 与服务端建立连接 | open</h2><p>通过 <code>XMLHttpRequest</code> 对象的 <code>open()</code> 方法与服务端建立连接</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">method</span> 请求方式 GET、POST
     * <span class="token keyword">@param</span> <span class="token parameter">url</span> 请求地址
     * <span class="token keyword">@param</span> <span class="token parameter">async</span> 是否异步 表示是否异步执行操作，默认为true
     * <span class="token keyword">@param</span> <span class="token parameter">user</span> 用户名  用于认证用途；默认为null
     * <span class="token keyword">@param</span> <span class="token parameter">password</span> 密码 用于认证用途；默认为null
    */</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> async<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="发送请求-send" tabindex="-1"><a class="header-anchor" href="#发送请求-send" aria-hidden="true">#</a> 发送请求 | send</h2><p>通过 <code>XMLHttpRequest</code> 对象的 <code>send()</code> 方法发送请求给服务器端</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">data</span> 请求参数 则默认值为 null
     * */</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用GET请求发送数据的时候，需要注意如下：</p><ul><li>GET请求发送数据，数据会附加在 <code>open()</code> 方法 <code>url</code> 之后（即把数据放置在HTTP协议头中），以?分割URL和传输数据，参数之间以&amp;相连，如 <code>EditPosts.aspx?name=test1&amp;id=test2</code></li><li>GET请求发送数据，会受到浏览器的限制，最多只能发送1024字节</li><li>送请求数据中的 <code>send()</code> 方法中参数设置为<code>null</code></li></ul><h2 id="接受响应数据-onreadystatechange" tabindex="-1"><a class="header-anchor" href="#接受响应数据-onreadystatechange" aria-hidden="true">#</a> 接受响应数据 | onreadystatechange</h2><p><code>onreadystatechange</code> 事件用于监听服务器端的通信状态，主要监听的属性为 <code>readyState</code>,有五个状态:</p><table><thead><tr><th style="text-align:center;">值</th><th style="text-align:center;">状态</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:center;">UNSENT</td><td style="text-align:center;">代理被创建，但尚未调用 <code>open()</code> 方法</td></tr><tr><td style="text-align:center;">1</td><td style="text-align:center;">OPENED</td><td style="text-align:center;"><code>open()</code> 方法已经被调用</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">HEADERS_RECEIVED</td><td style="text-align:center;"><code>send()</code> 方法已经被调用，并且头部和状态已经可获得</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">LOADING</td><td style="text-align:center;">下载中； <code>responseText</code> 属性已经包含部分数据</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">DONE</td><td style="text-align:center;">下载操作已完成</td></tr></tbody></table><p>只要 <code>readyState</code> 属性值一变化，就会触发一次 <code>readystatechange</code> 事件<br><code>responseText</code> 属性用于接收服务器端的响应结果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 请求已完成，且响应已就绪</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 服务器端响应的数据</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Error: &#39;</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),o=[c];function p(d,l){return a(),s("div",null,o)}const r=n(t,[["render",p],["__file","ajax.html.vue"]]);export{r as default};
