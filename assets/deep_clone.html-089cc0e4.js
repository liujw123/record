import{_ as o,r as p,o as c,c as l,d as n,e as s,f as e,b as t}from"./app-de7a4551.js";const i={},r=t(`<h1 id="deep-clone-深拷贝" tabindex="-1"><a class="header-anchor" href="#deep-clone-深拷贝" aria-hidden="true">#</a> Deep Clone | 深拷贝</h1><p>所有元素或属性均完全克隆，并于原引用类型完全独立，即，在后面修改对象的属性的时候，原对象不会被修改。</p><p>在 JavaScript 中复制一个对象几乎都是浅拷贝而不是深拷贝。</p><h2 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a> 浅拷贝</h2><p>浅拷贝只是复制了对象的引用，而不是对象本身。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">const</span> me <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ddd&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
  <span class="token literal-property property">girlFriend</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;bbb&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">81</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> meCopy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>me<span class="token punctuation">}</span><span class="token punctuation">;</span>

me<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>me<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 21</span>

me<span class="token punctuation">.</span>girlFriend<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">82</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>me<span class="token punctuation">.</span>girlFriend<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 82</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>有七种原始数据类型：string、number、bigint、boolean、undefined、symbol 和 null。</p></blockquote><h3 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h3><p>考虑几个因素：</p><ul><li>传入的对象是使用对象字面量<code>{}</code>创建的对象还是由构造函数生成的对象</li><li>如果对象是由构造函数创建出来的，那么是否要拷贝原型链上的属性</li><li>如果要拷贝原型链上的属性，那么如果原型链上存在多个同名的属性，保留哪个</li><li>如果对象中存在循环引用的情况，如何处理</li></ul><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h3><p>使用简单，且兼容性好</p><p>它能正确处理的对象只有 <code>Number</code>, <code>String</code>, <code>Boolean</code>, <code>Array</code>, 扁平对象，即那些能够被 <code>json</code> 直接表示的数据结构。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">let</span> _clone <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>弊端：</p><ul><li><code>obj</code> 对象存在循环引用，那么该方法会报错</li><li>对象存在 <code>Date</code> 对象，该方法会将其转化成字符串</li><li><code>obj</code> 对象中存在 <code>Set</code>、<code>Map</code>、正则、<code>Error</code> 对象，该方法会将其转成空对象字面量 <code>{ }</code> ，如果存在 <code>undefined</code>，该方法会直接忽略</li></ul>`,16),u={id:"lodash-clonedeep",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#lodash-clonedeep","aria-hidden":"true"},"#",-1),k={href:"https://www.lodashjs.com/docs/lodash.cloneDeep/",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,[s("兼容性好，功能强大，对于 "),n("code",null,"Function"),s(" 类型不会报错")],-1),m=n("p",null,[s("注意处理 "),n("code",null,"tree-shaking")],-1),b={href:"https://www.cnblogs.com/fancyLee/p/10932050.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://stackoverflow.com/questions/69457919/lodash-tree-shaking",target:"_blank",rel:"noopener noreferrer"},_=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token doc-comment comment">/**
     * 
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">value</span> 要深拷贝的值
     * <span class="token keyword">@returns</span> 返回深拷贝后的值
     * 
    */</span>
    _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),f={id:"structuredclone",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#structuredclone","aria-hidden":"true"},"#",-1),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/structuredClone",target:"_blank",rel:"noopener noreferrer"},w=t(`<p>浏览器原生支持, 兼容性问题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">value</span> 被克隆的对象。可以是任何结构化克隆支持的类型。  
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">options</span> 是一个可转移对象的数组，里面的 值 并没有被克隆，而是被转移到被拷贝对象上。
     * <span class="token keyword">@returns</span> 返回一个与被克隆对象结构相同的对象。
     * 
    */</span>

    <span class="token function">structuredClone</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token function">structuredClone</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token punctuation">{</span> transfer <span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),j={href:"https://github.com/ungap/structured-clone",target:"_blank",rel:"noopener noreferrer"},x=t(`<h3 id="基本实现" tabindex="-1"><a class="header-anchor" href="#基本实现" aria-hidden="true">#</a> 基本实现</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
    <span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
        <span class="token keyword">let</span> newObj <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//不遍历其原型链上的属性</span>
                <span class="token keyword">let</span> val <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
                newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">:</span> val<span class="token punctuation">;</span> 
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,3),C={href:"https://juejin.cn/post/7193997944171790396",target:"_blank",rel:"noopener noreferrer"},N={href:"https://www.w3cschool.cn/article/8b3a1e469cd340.html",target:"_blank",rel:"noopener noreferrer"};function S(O,J){const a=p("ExternalLinkIcon");return c(),l("div",null,[r,n("h3",u,[d,s(),n("a",k,[s("Lodash.cloneDeep"),e(a)])]),v,m,n("ul",null,[n("li",null,[n("a",b,[s("lodash按需引入"),e(a)])]),n("li",null,[n("a",h,[s("Lodash: tree shaking"),e(a)])])]),_,n("h3",f,[g,s(),n("a",y,[s("structuredClone"),e(a)])]),w,n("blockquote",null,[n("p",null,[n("a",j,[s("polyfill"),e(a)])])]),x,n("ol",null,[n("li",null,[n("a",C,[s("JS 原生的深拷贝来啦——structuredClone"),e(a)])]),n("li",null,[n("a",N,[s("JavaScript如何实现深拷贝"),e(a)])])])])}const L=o(i,[["render",S],["__file","deep_clone.html.vue"]]);export{L as default};
